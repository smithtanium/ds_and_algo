// linked_list.hpp
#ifndef LINKED_LIST_H // include guard
#define LINKED_LIST_H

#include <stdint.h>
#include <iostream>
#include "node.hpp"

template <class T>
class List
{
  public:
    List();
    List(T value);
    ~List();
    List(const List& aList);
    List(List& aList);
    // Copy assignement operator
    //Foo& operator=(const Foo& other);
    // Move assignment operator
    //Foo& operator=(Foo&& other);

    void assign(T size, T value);
    T back();
//    Node<T>::Iterator begin(); 
//    list::cbegin
//    list::cend
//    list::clear
//    list::crbegin
//    list::crend
//    list::emplace
//    list::emplace_back
//    list::emplace_front
//    list::empty
//    list::end
//    list::erase
    T front();
//    list::get_allocator
//    list::insert
//    list::max_size
//    list::merge
//    list::operator=
//    list::pop_back
//    list::pop_front
//    list::push_back
//    list::push_front
//    list::rbegin
//    list::remove
//    list::remove_if
//    list::rend
//    list::resize
//    list::reverse
    uint32_t size();
//    list::sort
//    list::splice
//    list::swap
//    list::unique
    
    void printList();
    Node<T>* getHeadNode();
    Node<T>* getTailNode();
      
  protected:
    Node<T> *head;
    Node<T> *tail;
    uint32_t length;
};

template class Node<int>;
template class Node<unsigned int>;
template class Node<float>;
template class Node<double>;
template class Node<uint8_t>;
template class Node<int8_t>;
template class Node<uint16_t>;
template class Node<int16_t>;
//template class Node<uint32_t>;
//template class Node<int32_t>;
template class Node<uint64_t>;
template class Node<int64_t>;

/*
template class List<int>;
template class List<unsigned int>;
template class List<float>;
template class List<double>;
template class List<uint8_t>;
template class List<int8_t>;
template class List<uint16_t>;
template class List<int16_t>;
//template class List<uint32_t>;
//template class List<int32_t>;
template class List<uint64_t>;
template class List<int64_t>;
*/

#endif /* LINKED_LIST_H */

